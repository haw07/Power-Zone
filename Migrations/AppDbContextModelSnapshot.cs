// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using power_zone.Data;

#nullable disable

namespace power_zone.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("power_zone.Models.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("className")
                        .HasColumnType("TEXT");

                    b.Property<string>("date")
                        .HasColumnType("TEXT");

                    b.Property<string>("duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("power_zone.Models.GymClass", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CoachName")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("day")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GymClasses");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CoachName = "Adam Smith",
                            EndTime = "14:00",
                            StartTime = "10:00",
                            day = "Monday",
                            name = "weight loose"
                        },
                        new
                        {
                            Id = "2",
                            CoachName = "Adam Smith",
                            EndTime = "18:00",
                            StartTime = "16:00",
                            day = "Monday",
                            name = "Karate"
                        },
                        new
                        {
                            Id = "3",
                            CoachName = "Adam Smith",
                            EndTime = "20:00",
                            StartTime = "18:00",
                            day = "Monday",
                            name = "yoga"
                        },
                        new
                        {
                            Id = "4",
                            CoachName = "Adam Smith",
                            EndTime = "23:00",
                            StartTime = "21:00",
                            day = "Monday",
                            name = "boxing"
                        },
                        new
                        {
                            Id = "5",
                            CoachName = "Adam Smith",
                            EndTime = "17:00",
                            StartTime = "14:00",
                            day = "Tuesday",
                            name = "Karate"
                        },
                        new
                        {
                            Id = "6",
                            CoachName = "Adam Smith",
                            EndTime = "20:00",
                            StartTime = "18:00",
                            day = "Tuesday",
                            name = "boxing"
                        },
                        new
                        {
                            Id = "7",
                            CoachName = "Adam Smith",
                            EndTime = "22:00",
                            StartTime = "20:00",
                            day = "Tuesday",
                            name = "yoga"
                        },
                        new
                        {
                            Id = "8",
                            CoachName = "James rachel",
                            EndTime = "15:00",
                            StartTime = "10:00",
                            day = "Wednesday",
                            name = "weight loose"
                        },
                        new
                        {
                            Id = "9",
                            CoachName = "James rachel",
                            EndTime = "19:00",
                            StartTime = "16:00",
                            day = "Wednesday",
                            name = "body building"
                        },
                        new
                        {
                            Id = "10",
                            CoachName = "James rachel",
                            EndTime = "23:00",
                            StartTime = "20:30",
                            day = "Wednesday",
                            name = "yoga"
                        },
                        new
                        {
                            Id = "11",
                            CoachName = "Abbey Mcvay",
                            EndTime = "17:00",
                            StartTime = "14:00",
                            day = "Thursday",
                            name = "weight loose"
                        },
                        new
                        {
                            Id = "12",
                            CoachName = "Abbey Mcvay",
                            EndTime = "22:00",
                            StartTime = "18:00",
                            day = "Thursday",
                            name = "boxing"
                        },
                        new
                        {
                            Id = "13",
                            CoachName = "Abbey Mcvay",
                            EndTime = "22:00",
                            StartTime = "18:00",
                            day = "Thursday",
                            name = "body building"
                        },
                        new
                        {
                            Id = "14",
                            CoachName = "Nicole Dahlberg",
                            EndTime = "13:00",
                            StartTime = "10:00",
                            day = "Friday",
                            name = "boxing"
                        },
                        new
                        {
                            Id = "15",
                            CoachName = "Nicole Dahlberg",
                            EndTime = "19:00",
                            StartTime = "16:00",
                            day = "Friday",
                            name = "body building"
                        },
                        new
                        {
                            Id = "16",
                            CoachName = "Nicole Dahlberg",
                            EndTime = "23:00",
                            StartTime = "22:00",
                            day = "Friday",
                            name = "weight loose"
                        },
                        new
                        {
                            Id = "17",
                            CoachName = "Jimmy Pratt",
                            EndTime = "15:30",
                            StartTime = "14:00",
                            day = "Saturday",
                            name = "yoga"
                        },
                        new
                        {
                            Id = "18",
                            CoachName = "Jimmy Pratt",
                            EndTime = "17:00",
                            StartTime = "16:00",
                            day = "Saturday",
                            name = "boxing"
                        },
                        new
                        {
                            Id = "19",
                            CoachName = "Jimmy Pratt",
                            EndTime = "22:00",
                            StartTime = "18:00",
                            day = "Saturday",
                            name = "boxing"
                        },
                        new
                        {
                            Id = "20",
                            CoachName = "Mickeal Anderson",
                            EndTime = "13:30",
                            StartTime = "10:00",
                            day = "Sunday",
                            name = "body building"
                        },
                        new
                        {
                            Id = "21",
                            CoachName = "Mickeal Anderson",
                            EndTime = "20:00",
                            StartTime = "16:00",
                            day = "Sunday",
                            name = "Karate"
                        },
                        new
                        {
                            Id = "22",
                            CoachName = "Mickeal Anderson",
                            EndTime = "23:00",
                            StartTime = "21:00",
                            day = "Sunday",
                            name = "weight loose"
                        });
                });

            modelBuilder.Entity("power_zone.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<float>("BMI")
                        .HasColumnType("REAL");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("address")
                        .HasColumnType("TEXT");

                    b.Property<string>("classes")
                        .HasColumnType("TEXT");

                    b.Property<float>("height")
                        .HasColumnType("REAL");

                    b.Property<string>("imgURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("lastName")
                        .HasColumnType("TEXT");

                    b.Property<float>("max_bench_press")
                        .HasColumnType("REAL");

                    b.Property<float>("max_deadlift")
                        .HasColumnType("REAL");

                    b.Property<float>("max_squat")
                        .HasColumnType("REAL");

                    b.Property<string>("password")
                        .HasColumnType("TEXT");

                    b.Property<float>("progress")
                        .HasColumnType("REAL");

                    b.Property<string>("role")
                        .HasColumnType("TEXT");

                    b.Property<string>("trainees")
                        .HasColumnType("TEXT");

                    b.Property<int>("verificationPin")
                        .HasColumnType("INTEGER");

                    b.Property<float>("weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            BMI = 0f,
                            ConcurrencyStamp = "e0345354-cc91-40cb-a58d-b2402c22cca1",
                            Email = "coach01@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "64fcf372-edba-4129-8262-f57d1946d273",
                            TwoFactorEnabled = false,
                            UserName = "James",
                            address = "123 Main St",
                            classes = "9,10",
                            height = 0f,
                            imgURL = "https://img.freepik.com/premium-photo/portrait-happy-gym-trainer-holding-clipboard_107420-30393.jpg?w=2000",
                            lastName = "Rachel",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            progress = 0f,
                            role = "Coach",
                            trainees = "7",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            BMI = 0f,
                            ConcurrencyStamp = "4b903ca4-9d40-4329-8dd4-cac8c726e111",
                            Email = "coach02@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8fa58f47-707a-478e-a9b5-81d417f13911",
                            TwoFactorEnabled = false,
                            UserName = "Adam",
                            address = "24 Main Street",
                            classes = "1,2,3,4,5,6,7",
                            height = 0f,
                            imgURL = "https://media.istockphoto.com/id/1369509413/photo/shot-of-a-handsome-young-man-taking-a-break-during-his-workout.jpg?b=1&s=170667a&w=0&k=20&c=MC2um7AEeVfi6Omt4i4ygVzO42upQt4jvI32tHgt0OE=",
                            lastName = "Smith",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            progress = 0f,
                            role = "Coach",
                            trainees = "7",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            BMI = 0f,
                            ConcurrencyStamp = "6252556f-b43e-4d59-9638-92372d1006bd",
                            Email = "coach03@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2f52566-2cdc-4137-8335-97823cd33061",
                            TwoFactorEnabled = false,
                            UserName = "Abbey",
                            address = "123 Main S",
                            classes = "11,12,13",
                            height = 0f,
                            imgURL = "https://media.istockphoto.com/id/675213138/photo/smiling-trainer-holding-clipboard.jpg?s=612x612&w=0&k=20&c=irFL9mh56DGBruHtTJQtUfanzAOoQCw9CHPVEVqPKhc=",
                            lastName = "Mcvay",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            progress = 0f,
                            role = "Coach",
                            trainees = "7",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            BMI = 0f,
                            ConcurrencyStamp = "8022c78a-3ba7-4535-a0c7-d548749fb7bf",
                            Email = "coach04@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0edfa1c3-8763-449b-8283-251c5459cb32",
                            TwoFactorEnabled = false,
                            UserName = "Nicole",
                            address = "33 Street",
                            classes = "14,15,16",
                            height = 0f,
                            imgURL = "https://media.istockphoto.com/id/635742500/photo/personal-trainer-with-clipboard-showing-thumb-up-in-gym.jpg?s=612x612&w=0&k=20&c=g3w-6fFlo47Crqwa5NJh9ZfQf5knWlGsSJY5AAwyAf0=",
                            lastName = "Dahlberg",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            progress = 0f,
                            role = "Coach",
                            trainees = "8",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            BMI = 0f,
                            ConcurrencyStamp = "44f7efa1-3c1f-45e6-a06c-94615fc9246f",
                            Email = "coach05@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2321256b-3a1e-4d41-90ab-8df9de07712e",
                            TwoFactorEnabled = false,
                            UserName = "Jimmy",
                            address = "32 St",
                            classes = "17,18,19",
                            height = 0f,
                            imgURL = "https://media.istockphoto.com/id/1018043738/photo/portrait-of-chinese-personal-trainer-in-gym.jpg?s=612x612&w=0&k=20&c=BpuYao5G3qr5SG7IUq15CESYHxunuvz66qfnDKJfX9s=",
                            lastName = "Pratt",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            progress = 0f,
                            role = "Coach",
                            trainees = "8",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            BMI = 0f,
                            ConcurrencyStamp = "ceff13ac-c1b6-40f0-b3de-4dbcd1f334aa",
                            Email = "coach06@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b620022-6aef-4f86-858b-5ad978c057b4",
                            TwoFactorEnabled = false,
                            UserName = "Mickeal",
                            address = "22 Main St",
                            classes = "20,21,22",
                            height = 0f,
                            imgURL = "https://media.istockphoto.com/id/925188400/photo/happy-fitness-instructor-with-training-plan-in-a-health-club.jpg?s=612x612&w=0&k=20&c=XK4wm54qQ81iA3KZ25f4U5ByUS7UuofHE4NdQopsZAc=",
                            lastName = "Anderson",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            progress = 0f,
                            role = "Coach",
                            trainees = "8",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            BMI = 0f,
                            ConcurrencyStamp = "b38a27d5-b15a-46e8-9d8e-0d506fc0c02d",
                            Email = "trainee01@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82d28cb4-c910-41b5-b864-c659cd604efe",
                            TwoFactorEnabled = false,
                            UserName = "Joudy",
                            classes = "1,2,3,4,5,6,7,8,9,10",
                            height = 0f,
                            lastName = "Ashkar",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            progress = 0f,
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            BMI = 0f,
                            ConcurrencyStamp = "ab7b277f-3ada-4c17-bbec-ab33a31667c8",
                            Email = "trainee02@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f8569efb-5268-439b-b08b-c258620292cb",
                            TwoFactorEnabled = false,
                            UserName = "Nour",
                            classes = "14,15,16,17,18,19,20,21,22",
                            height = 0f,
                            lastName = "Obeid",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            progress = 0f,
                            verificationPin = 0,
                            weight = 0f
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("power_zone.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("power_zone.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("power_zone.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("power_zone.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
