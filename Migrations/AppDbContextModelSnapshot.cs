// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using power_zone.Data;

#nullable disable

namespace power_zone.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("power_zone.Models.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("className")
                        .HasColumnType("TEXT");

                    b.Property<string>("coachName")
                        .HasColumnType("TEXT");

                    b.Property<string>("day")
                        .HasColumnType("TEXT");

                    b.Property<string>("endTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("startTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("userName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("power_zone.Models.GymClass", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CoachName")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("day")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GymClasses");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CoachName = "Adam Smith",
                            EndTime = "14:00",
                            StartTime = "10:00",
                            capacity = 5,
                            day = "Monday",
                            name = "weight loose"
                        },
                        new
                        {
                            Id = "2",
                            CoachName = "Adam Smith",
                            EndTime = "18:00",
                            StartTime = "16:00",
                            capacity = 6,
                            day = "Monday",
                            name = "weight loose"
                        },
                        new
                        {
                            Id = "3",
                            CoachName = "Adam Smith",
                            EndTime = "20:00",
                            StartTime = "18:00",
                            capacity = 1,
                            day = "Monday",
                            name = "weight loose"
                        },
                        new
                        {
                            Id = "4",
                            CoachName = "Adam Smith",
                            EndTime = "22:00",
                            StartTime = "20:00",
                            capacity = 0,
                            day = "Monday",
                            name = "weight loose"
                        },
                        new
                        {
                            Id = "5",
                            CoachName = "Adam Smith",
                            EndTime = "16:00",
                            StartTime = "14:00",
                            capacity = 2,
                            day = "Tuesday",
                            name = "Karate"
                        },
                        new
                        {
                            Id = "6",
                            CoachName = "Adam Smith",
                            EndTime = "20:00",
                            StartTime = "18:00",
                            capacity = 5,
                            day = "Tuesday",
                            name = "weight loose"
                        },
                        new
                        {
                            Id = "7",
                            CoachName = "Adam Smith",
                            EndTime = "22:00",
                            StartTime = "20:00",
                            capacity = 5,
                            day = "Tuesday",
                            name = "karate"
                        },
                        new
                        {
                            Id = "8",
                            CoachName = "James Rachel",
                            EndTime = "14:00",
                            StartTime = "10:00",
                            capacity = 5,
                            day = "Wednesday",
                            name = "body building"
                        },
                        new
                        {
                            Id = "9",
                            CoachName = "James Rachel",
                            EndTime = "18:00",
                            StartTime = "16:00",
                            capacity = 5,
                            day = "Wednesday",
                            name = "body building"
                        },
                        new
                        {
                            Id = "10",
                            CoachName = "James Rachel",
                            EndTime = "22:00",
                            StartTime = "20:30",
                            capacity = 5,
                            day = "Wednesday",
                            name = "body building"
                        },
                        new
                        {
                            Id = "11",
                            CoachName = "Abbey Mcvay",
                            EndTime = "16:00",
                            StartTime = "14:00",
                            capacity = 5,
                            day = "Thursday",
                            name = "karate"
                        },
                        new
                        {
                            Id = "12",
                            CoachName = "Abbey Mcvay",
                            EndTime = "20:00",
                            StartTime = "18:00",
                            capacity = 5,
                            day = "Thursday",
                            name = "yoga"
                        },
                        new
                        {
                            Id = "13",
                            CoachName = "Abbey Mcvay",
                            EndTime = "22:00",
                            StartTime = "20:00",
                            capacity = 10,
                            day = "Thursday",
                            name = "yoga"
                        },
                        new
                        {
                            Id = "14",
                            CoachName = "Nicole Dahlberg",
                            EndTime = "13:00",
                            StartTime = "10:00",
                            capacity = 12,
                            day = "Friday",
                            name = "boxing"
                        },
                        new
                        {
                            Id = "15",
                            CoachName = "Nicole Dahlberg",
                            EndTime = "18:00",
                            StartTime = "16:00",
                            capacity = 20,
                            day = "Friday",
                            name = "weight loose"
                        },
                        new
                        {
                            Id = "16",
                            CoachName = "Nicole Dahlberg",
                            EndTime = "22:00",
                            StartTime = "21:00",
                            capacity = 5,
                            day = "Friday",
                            name = "boxing"
                        },
                        new
                        {
                            Id = "17",
                            CoachName = "Jimmy Pratt",
                            EndTime = "15:30",
                            StartTime = "14:00",
                            capacity = 5,
                            day = "Saturday",
                            name = "yoga"
                        },
                        new
                        {
                            Id = "18",
                            CoachName = "Jimmy Pratt",
                            EndTime = "17:00",
                            StartTime = "16:00",
                            capacity = 5,
                            day = "Saturday",
                            name = "yoga"
                        },
                        new
                        {
                            Id = "19",
                            CoachName = "Jimmy Pratt",
                            EndTime = "20:00",
                            StartTime = "18:00",
                            capacity = 5,
                            day = "Saturday",
                            name = "body building"
                        },
                        new
                        {
                            Id = "20",
                            CoachName = "Mickeal Anderson",
                            EndTime = "13:30",
                            StartTime = "10:00",
                            capacity = 10,
                            day = "Sunday",
                            name = "boxing"
                        },
                        new
                        {
                            Id = "21",
                            CoachName = "Mickeal Anderson",
                            EndTime = "18:00",
                            StartTime = "16:00",
                            capacity = 6,
                            day = "Sunday",
                            name = "karate"
                        },
                        new
                        {
                            Id = "22",
                            CoachName = "Mickeal Anderson",
                            EndTime = "22:00",
                            StartTime = "21:00",
                            capacity = 12,
                            day = "Sunday",
                            name = "boxing"
                        });
                });

            modelBuilder.Entity("power_zone.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("address")
                        .HasColumnType("TEXT");

                    b.Property<string>("classes")
                        .HasColumnType("TEXT");

                    b.Property<string>("gender")
                        .HasColumnType("TEXT");

                    b.Property<float>("height")
                        .HasColumnType("REAL");

                    b.Property<string>("imgURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("lastName")
                        .HasColumnType("TEXT");

                    b.Property<float>("max_bench_press")
                        .HasColumnType("REAL");

                    b.Property<float>("max_deadlift")
                        .HasColumnType("REAL");

                    b.Property<float>("max_squat")
                        .HasColumnType("REAL");

                    b.Property<string>("password")
                        .HasColumnType("TEXT");

                    b.Property<float>("progress")
                        .HasColumnType("REAL");

                    b.Property<string>("role")
                        .HasColumnType("TEXT");

                    b.Property<string>("trainees")
                        .HasColumnType("TEXT");

                    b.Property<int>("verificationPin")
                        .HasColumnType("INTEGER");

                    b.Property<float>("weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6207aa70-8d9f-49a2-91a9-ceaad8bcab9b",
                            Email = "owner00@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b02fbbe5-c9cd-42af-870e-4a74a65ea227",
                            TwoFactorEnabled = false,
                            UserName = "Power",
                            address = "123 Main St",
                            gender = "F",
                            height = 0f,
                            lastName = "Zone",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "010203",
                            progress = 0f,
                            role = "Owner",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "777ce3a8-1a3e-413f-b7d7-642ca7c05c33",
                            Email = "coach01@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f97ee7f4-7c17-4d68-97dc-ed5e4896f917",
                            TwoFactorEnabled = false,
                            UserName = "James",
                            address = "123 Main St",
                            classes = "9,10",
                            gender = "F",
                            height = 0f,
                            imgURL = "https://media.istockphoto.com/id/852401732/photo/happy-personal-trainer-working-at-the-gym.jpg?b=1&s=170667a&w=0&k=20&c=6OZXbwAbJndJ8kvWuusRqjgBxomisfcm8LNtDH2eurM=",
                            lastName = "Rachel",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "james1",
                            progress = 0f,
                            role = "Coach",
                            trainees = "7",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a27e09c1-b7b8-484e-ac79-deb5d00afc06",
                            Email = "coach02@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a1e4802-9c67-4b15-92e7-130f1a83d40b",
                            TwoFactorEnabled = false,
                            UserName = "Adam",
                            address = "24 Main Street",
                            classes = "1,2,3,4,5,6,7",
                            gender = "M",
                            height = 0f,
                            imgURL = "https://media.istockphoto.com/id/475495254/photo/african-american-male-trainer-with-clipboard.jpg?b=1&s=170667a&w=0&k=20&c=-PZ1ID6ZRhrPWP2r0G7ftlMjGfbrG0aItOkjrkFMQL0=",
                            lastName = "Smith",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "adam2",
                            progress = 0f,
                            role = "Coach",
                            trainees = "7",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "708efe20-1d08-475d-a6e1-0b15ea046f6c",
                            Email = "coach03@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14bae8f1-820e-4d3c-9517-81386300d7af",
                            TwoFactorEnabled = false,
                            UserName = "Abbey",
                            address = "123 Main S",
                            classes = "11,12,13",
                            gender = "F",
                            height = 0f,
                            imgURL = "https://media.istockphoto.com/id/856797530/photo/portrait-of-a-beautiful-woman-at-the-gym.jpg?b=1&s=170667a&w=0&k=20&c=CrAKXWaWFyHtcSaSOE8cLHFIvuibWRiKHPOxy7eXmso=",
                            lastName = "Mcvay",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "abbey3",
                            progress = 0f,
                            role = "Coach",
                            trainees = "7",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73db8df3-f090-4d01-8b11-d27092380b5e",
                            Email = "coach04@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7345f72-2358-4579-b648-6957d65843e9",
                            TwoFactorEnabled = false,
                            UserName = "Nicole",
                            address = "33 Street",
                            classes = "14,15,16",
                            gender = "F",
                            height = 0f,
                            imgURL = "https://img.freepik.com/premium-photo/young-female-fitness-personal-trainer-with-notepad-standing-gym-with-thumb-up_146671-31568.jpg?w=900",
                            lastName = "Dahlberg",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "nicole4",
                            progress = 0f,
                            role = "Coach",
                            trainees = "8",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d50e3143-7aa5-4366-841a-b7b5e159bcdd",
                            Email = "coach05@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "17d5c778-261d-4ceb-91af-818a763d4789",
                            TwoFactorEnabled = false,
                            UserName = "Jimmy",
                            address = "32 St",
                            classes = "17,18,19",
                            gender = "M",
                            height = 0f,
                            imgURL = "https://hips.hearstapps.com/hmg-prod/images/mh-trainer-2-1533576998.png",
                            lastName = "Pratt",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "jimmy5",
                            progress = 0f,
                            role = "Coach",
                            trainees = "8",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "325cb262-744d-494b-a471-47fecce821d2",
                            Email = "coach06@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91c4785e-f939-43aa-aae4-4a9c42583c76",
                            TwoFactorEnabled = false,
                            UserName = "Mickeal",
                            address = "22 Main St",
                            classes = "20,21,22",
                            gender = "M",
                            height = 0f,
                            imgURL = "https://hips.hearstapps.com/hmg-prod/images/portrait-of-a-trainer-in-gym-royalty-free-image-1584723855.jpg",
                            lastName = "Anderson",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "mickeal6",
                            progress = 0f,
                            role = "Coach",
                            trainees = "8",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0683758-60ed-4215-b316-d0ff84b45298",
                            Email = "trainee01@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f949f84c-0e3c-4661-9627-32a9cd66359f",
                            TwoFactorEnabled = false,
                            UserName = "Joudy",
                            address = "Kalifornia 33 Street",
                            classes = "1,2,3,4,5,6,7,8,9,10",
                            gender = "F",
                            height = 0f,
                            lastName = "Ashkar",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "joudy8",
                            progress = 0f,
                            role = "User",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e882c216-218e-4e95-b160-2081162a0b7e",
                            Email = "trainee02@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ae47c9b-1ac0-425e-9527-38453389afb6",
                            TwoFactorEnabled = false,
                            UserName = "Nour",
                            address = "New York City, 33 Street",
                            classes = "14,15,16,17,18,19,20,21,22",
                            gender = "F",
                            height = 0f,
                            lastName = "Obeid",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "Nour8",
                            progress = 0f,
                            role = "User",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63fde4c1-0330-4876-8c42-686c4fb73bb3",
                            Email = "trainee03@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b86ad0f-ac26-41df-bb07-7b56feec1054",
                            TwoFactorEnabled = false,
                            UserName = "Alex",
                            address = "New York City, 33 Street",
                            classes = "14",
                            gender = "M",
                            height = 0f,
                            lastName = "Smith",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "Alex9",
                            progress = 0f,
                            role = "User",
                            verificationPin = 0,
                            weight = 0f
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("power_zone.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("power_zone.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("power_zone.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("power_zone.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
