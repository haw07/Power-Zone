// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using power_zone.Data;

#nullable disable

namespace power_zone.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230422001537_InitailCreate")]
    partial class InitailCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("power_zone.Models.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("className")
                        .HasColumnType("TEXT");

                    b.Property<string>("coachName")
                        .HasColumnType("TEXT");

                    b.Property<string>("day")
                        .HasColumnType("TEXT");

                    b.Property<string>("endTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("startTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("userName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("power_zone.Models.GymClass", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CoachName")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("day")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GymClasses");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CoachName = "Adam Smith",
                            EndTime = "14:00",
                            StartTime = "10:00",
                            capacity = 5,
                            day = "Monday",
                            name = "weight loose"
                        },
                        new
                        {
                            Id = "2",
                            CoachName = "Adam Smith",
                            EndTime = "18:00",
                            StartTime = "16:00",
                            capacity = 6,
                            day = "Monday",
                            name = "Karate"
                        },
                        new
                        {
                            Id = "3",
                            CoachName = "Adam Smith",
                            EndTime = "20:00",
                            StartTime = "18:00",
                            capacity = 1,
                            day = "Monday",
                            name = "yoga"
                        },
                        new
                        {
                            Id = "4",
                            CoachName = "Adam Smith",
                            EndTime = "22:00",
                            StartTime = "20:00",
                            capacity = 0,
                            day = "Monday",
                            name = "boxing"
                        },
                        new
                        {
                            Id = "5",
                            CoachName = "Adam Smith",
                            EndTime = "16:00",
                            StartTime = "14:00",
                            capacity = 2,
                            day = "Tuesday",
                            name = "Karate"
                        },
                        new
                        {
                            Id = "6",
                            CoachName = "Adam Smith",
                            EndTime = "20:00",
                            StartTime = "18:00",
                            capacity = 5,
                            day = "Tuesday",
                            name = "boxing"
                        },
                        new
                        {
                            Id = "7",
                            CoachName = "Adam Smith",
                            EndTime = "22:00",
                            StartTime = "20:00",
                            capacity = 5,
                            day = "Tuesday",
                            name = "yoga"
                        },
                        new
                        {
                            Id = "8",
                            CoachName = "James Rachel",
                            EndTime = "14:00",
                            StartTime = "10:00",
                            capacity = 5,
                            day = "Wednesday",
                            name = "weight loose"
                        },
                        new
                        {
                            Id = "9",
                            CoachName = "James Rachel",
                            EndTime = "18:00",
                            StartTime = "16:00",
                            capacity = 5,
                            day = "Wednesday",
                            name = "body building"
                        },
                        new
                        {
                            Id = "10",
                            CoachName = "James Rachel",
                            EndTime = "22:00",
                            StartTime = "20:30",
                            capacity = 5,
                            day = "Wednesday",
                            name = "yoga"
                        },
                        new
                        {
                            Id = "11",
                            CoachName = "Abbey Mcvay",
                            EndTime = "16:00",
                            StartTime = "14:00",
                            capacity = 5,
                            day = "Thursday",
                            name = "weight loose"
                        },
                        new
                        {
                            Id = "12",
                            CoachName = "Abbey Mcvay",
                            EndTime = "20:00",
                            StartTime = "18:00",
                            capacity = 5,
                            day = "Thursday",
                            name = "boxing"
                        },
                        new
                        {
                            Id = "13",
                            CoachName = "Abbey Mcvay",
                            EndTime = "22:00",
                            StartTime = "20:00",
                            capacity = 10,
                            day = "Thursday",
                            name = "body building"
                        },
                        new
                        {
                            Id = "14",
                            CoachName = "Nicole Dahlberg",
                            EndTime = "13:00",
                            StartTime = "10:00",
                            capacity = 12,
                            day = "Friday",
                            name = "boxing"
                        },
                        new
                        {
                            Id = "15",
                            CoachName = "Nicole Dahlberg",
                            EndTime = "18:00",
                            StartTime = "16:00",
                            capacity = 20,
                            day = "Friday",
                            name = "body building"
                        },
                        new
                        {
                            Id = "16",
                            CoachName = "Nicole Dahlberg",
                            EndTime = "22:00",
                            StartTime = "21:00",
                            capacity = 5,
                            day = "Friday",
                            name = "weight loose"
                        },
                        new
                        {
                            Id = "17",
                            CoachName = "Jimmy Pratt",
                            EndTime = "15:30",
                            StartTime = "14:00",
                            capacity = 5,
                            day = "Saturday",
                            name = "yoga"
                        },
                        new
                        {
                            Id = "18",
                            CoachName = "Jimmy Pratt",
                            EndTime = "17:00",
                            StartTime = "16:00",
                            capacity = 5,
                            day = "Saturday",
                            name = "boxing"
                        },
                        new
                        {
                            Id = "19",
                            CoachName = "Jimmy Pratt",
                            EndTime = "20:00",
                            StartTime = "18:00",
                            capacity = 5,
                            day = "Saturday",
                            name = "boxing"
                        },
                        new
                        {
                            Id = "20",
                            CoachName = "Mickeal Anderson",
                            EndTime = "13:30",
                            StartTime = "10:00",
                            capacity = 10,
                            day = "Sunday",
                            name = "body building"
                        },
                        new
                        {
                            Id = "21",
                            CoachName = "Mickeal Anderson",
                            EndTime = "18:00",
                            StartTime = "16:00",
                            capacity = 6,
                            day = "Sunday",
                            name = "Karate"
                        },
                        new
                        {
                            Id = "22",
                            CoachName = "Mickeal Anderson",
                            EndTime = "22:00",
                            StartTime = "21:00",
                            capacity = 12,
                            day = "Sunday",
                            name = "weight loose"
                        });
                });

            modelBuilder.Entity("power_zone.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("address")
                        .HasColumnType("TEXT");

                    b.Property<string>("classes")
                        .HasColumnType("TEXT");

                    b.Property<string>("gender")
                        .HasColumnType("TEXT");

                    b.Property<float>("height")
                        .HasColumnType("REAL");

                    b.Property<string>("lastName")
                        .HasColumnType("TEXT");

                    b.Property<float>("max_bench_press")
                        .HasColumnType("REAL");

                    b.Property<float>("max_deadlift")
                        .HasColumnType("REAL");

                    b.Property<float>("max_squat")
                        .HasColumnType("REAL");

                    b.Property<string>("password")
                        .HasColumnType("TEXT");

                    b.Property<float>("progress")
                        .HasColumnType("REAL");

                    b.Property<string>("role")
                        .HasColumnType("TEXT");

                    b.Property<string>("trainees")
                        .HasColumnType("TEXT");

                    b.Property<int>("verificationPin")
                        .HasColumnType("INTEGER");

                    b.Property<float>("weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2946a8f-fb18-4b7a-b9b9-b6aad12b206b",
                            Email = "owner00@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f13620e-8388-423b-9b07-1d7a78fce8eb",
                            TwoFactorEnabled = false,
                            UserName = "Power",
                            address = "123 Main St",
                            gender = "F",
                            height = 0f,
                            lastName = "Zone",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "010203",
                            progress = 0f,
                            role = "Owner",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fbb0d0b3-151c-44b3-881e-7186f24d0887",
                            Email = "coach01@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d34e2b69-d02a-4b6f-8410-26ae05816492",
                            TwoFactorEnabled = false,
                            UserName = "James",
                            address = "123 Main St",
                            classes = "9,10",
                            gender = "F",
                            height = 0f,
                            lastName = "Rachel",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "james1",
                            progress = 0f,
                            role = "Coach",
                            trainees = "7",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a51eabf-7bbe-4a79-aecd-123e1816adda",
                            Email = "coach02@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1c32d7a-19ee-4f5e-a0e7-9ddab446347e",
                            TwoFactorEnabled = false,
                            UserName = "Adam",
                            address = "24 Main Street",
                            classes = "1,2,3,4,5,6,7",
                            gender = "M",
                            height = 0f,
                            lastName = "Smith",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "adam2",
                            progress = 0f,
                            role = "Coach",
                            trainees = "7",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08021701-4e04-4335-af64-58f20eba8d95",
                            Email = "coach03@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ce0401e-7113-43c0-9af2-19aa2f9bc78f",
                            TwoFactorEnabled = false,
                            UserName = "Abbey",
                            address = "123 Main S",
                            classes = "11,12,13",
                            gender = "F",
                            height = 0f,
                            lastName = "Mcvay",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "abbey3",
                            progress = 0f,
                            role = "Coach",
                            trainees = "7",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b4fc407-06c3-483a-ab1b-b4362037ddb6",
                            Email = "coach04@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "246a5974-af70-42bd-81a1-9612c84593c4",
                            TwoFactorEnabled = false,
                            UserName = "Nicole",
                            address = "33 Street",
                            classes = "14,15,16",
                            gender = "F",
                            height = 0f,
                            lastName = "Dahlberg",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "nicole4",
                            progress = 0f,
                            role = "Coach",
                            trainees = "8",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1cb0f34a-2a11-4da3-829a-4cea134a8ccb",
                            Email = "coach05@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b87c3123-b437-4031-ae09-9826f5245d5b",
                            TwoFactorEnabled = false,
                            UserName = "Jimmy",
                            address = "32 St",
                            classes = "17,18,19",
                            gender = "M",
                            height = 0f,
                            lastName = "Pratt",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "jimmy5",
                            progress = 0f,
                            role = "Coach",
                            trainees = "8",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "628c5031-b7a8-4f70-a677-5576a06d8733",
                            Email = "coach06@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c198fe3-70d2-4475-aa1e-280c659691a3",
                            TwoFactorEnabled = false,
                            UserName = "Mickeal",
                            address = "22 Main St",
                            classes = "20,21,22",
                            gender = "M",
                            height = 0f,
                            lastName = "Anderson",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "mickeal6",
                            progress = 0f,
                            role = "Coach",
                            trainees = "8",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a20dc9f-9413-4c28-af89-2f83d3740ca6",
                            Email = "trainee01@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4860f57c-63e2-4fef-ba0f-433d3f22ce2f",
                            TwoFactorEnabled = false,
                            UserName = "Joudy",
                            address = "Kalifornia 33 Street",
                            classes = "1,2,3,4,5,6,7,8,9,10",
                            gender = "F",
                            height = 0f,
                            lastName = "Ashkar",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "joudy8",
                            progress = 0f,
                            role = "User",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c9af6f3-3d42-47ed-adac-b697fee09e27",
                            Email = "trainee02@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "759b10ad-e98e-4501-accd-c39fb0f78652",
                            TwoFactorEnabled = false,
                            UserName = "Nour",
                            address = "New York City, 33 Street",
                            classes = "14,15,16,17,18,19,20,21,22",
                            gender = "F",
                            height = 0f,
                            lastName = "Obeid",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "Nour8",
                            progress = 0f,
                            role = "User",
                            verificationPin = 0,
                            weight = 0f
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0748e297-ade2-4317-a8c2-3a7ec0f34b71",
                            Email = "trainee03@powerzone.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f875574-749b-4fff-8362-afa17686d469",
                            TwoFactorEnabled = false,
                            UserName = "Alex",
                            address = "New York City, 33 Street",
                            classes = "14",
                            gender = "M",
                            height = 0f,
                            lastName = "Smith",
                            max_bench_press = 0f,
                            max_deadlift = 0f,
                            max_squat = 0f,
                            password = "Alex9",
                            progress = 0f,
                            role = "User",
                            verificationPin = 0,
                            weight = 0f
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("power_zone.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("power_zone.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("power_zone.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("power_zone.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
